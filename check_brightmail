#!/usr/bin/perl 
#===============================================================================
#
#         FILE:  check_brightmail
#
#        USAGE:  ./check_brightmail --address=<IP address> --community=<SNMP
#                community> --snmp_cmd=<alternate location of snmpwalk>
#                --debug
#
#  DESCRIPTION:  Icinga plugin for checking the state of Brightmail load 
#				 and mail queues
#      OPTIONS:  IP address, SNMP community
# REQUIREMENTS:  Getopt::Long
#         BUGS:  Most likely
#        NOTES:  ---
#       AUTHOR:  Morten A. Middelthon (mm), mm@lastfriday.no
#      VERSION:  1.0
#      CREATED:  09. april 2015 kl. 14.50 +0200
#     REVISION:  ---
#===============================================================================

use strict;
use warnings;
use Getopt::Long;

# Set on/off debug output. Default off
my $debug = 0;

# Set default values and read command line options
my $address = "";
my $community = "";
my $snmp_version = "2c";
my $snmp_cmd = "/usr/bin/snmpget -v$snmp_version"; 
my $result = GetOptions(
	'address=s'		=>	\$address,
	'community=s'	=>	\$community,
	'snmp_cmd=s'	=>	\$snmp_cmd,
	'debug'			=>	\$debug,
	);

if($address eq "" or $community eq "") {
	die "Usage: $0 --address=<IP Address> --community=<SNMP community>\n";
}

# Nagios/Icinga message strings
my $msg = "";
my $warning = "";
my $critical = "";
my $perfdata = "";

# Warning and critical thresholds
my $load_warning = 3;
my $load_critical = 4;
my $connections_warning = 50;
my $connections_critical = 70;
my $queued_warning = 10;
my $queued_critical = 20;
my $mem_warning = 95;
my $mem_critical = 99;

# Define OIDs
my %oid = (
	'load_5'			=> ".1.3.6.1.4.1.2021.10.1.3.1",
	'load_10'			=> ".1.3.6.1.4.1.2021.10.1.3.2",
	'load_15'			=> ".1.3.6.1.4.1.2021.10.1.3.3",
	'connections'	 	=> ".1.3.6.1.4.1.393.200.130.2.2.1.1.3",
	'datarate'	 		=> ".1.3.6.1.4.1.393.200.130.2.2.1.1.4",
	'queuesize'			=> ".1.3.6.1.4.1.393.200.130.2.2.1.1.7",
	'queuedmessages'	=> ".1.3.6.1.4.1.393.200.130.2.2.1.1.8",
	'virtual_mem'		=> ".1.3.6.1.2.1.25.2.3.1.5.3",
	'virtual_memused'	=> ".1.3.6.1.2.1.25.2.3.1.6.3",
	);

my $output = "";
my $x = 0;

# Check client connections
my $connections = 0;
for($x = 1; $x <= 3; $x++) {
	$output = `$snmp_cmd -c $community $address $oid{'connections'}.$x`;
	if($output =~ /Gauge32: (\d*)/) {
		$connections += $1;
	}
	else {
		die "Error in SNMP output\n";
	}
}
if($connections > $connections_critical) {
	$critical .= " - Connection threshold exceeded: $connections";
}
elsif($connections > $connections_warning) {
	$warning .= " - Connection threshold exceeded: $connections";
}
$msg .= "Total connections: $connections\n";
$perfdata .= " connections=$connections;$connections_warning;$connections_critical";

# Check queue size
my $queuesize = 0;
for($x = 1; $x <= 3; $x++) {
	$output = `$snmp_cmd -c $community $address $oid{'queuesize'}.$x`;
	if($output =~ /Gauge32: (\d*)/) {
		$queuesize += $1;
	}
	else {
		die "Error in SNMP output\n";
	}
}
$msg .= "Total queue size: $queuesize\n";
$perfdata .= " queuesize=$queuesize";

# Check queued messages
my $queued = 0;
for($x = 1; $x <= 3; $x++) {
	$output = `$snmp_cmd -c $community $address $oid{'queuedmessages'}.$x`;
	if($output =~ /Gauge32: (\d*)/) {
		$queued += $1;
	}
	else {
		die "Error in SNMP output\n";
	}
}
$msg .= "Total queue messages: $queued\n";
$perfdata .= " queuedmsgs=$queued;$queued_warning;$queued_critical";
if($queued > $queued_critical) {
	$critical .= " - Queued messages exceeds threshold: $queued";
}
elsif($queued > $queued_warning) {
	$warning .= " - Queued messages exceeds threshold: $queued";
}

# Check data rate
my $datarate = 0;
for($x = 1; $x <= 3; $x++) {
	$output = `$snmp_cmd -c $community $address $oid{'datarate'}.$x`;
	if($output =~ /Gauge32: (\d*)/) {
		$datarate += $1;
	}
	else {
		die "Error in SNMP output\n";
	}
}
$msg .= "Total data rate: $datarate\n";
$perfdata .= " datarate=$datarate";


# Check load levels
my $load_5;
my $load_10;
my $load_15;
$output = `$snmp_cmd -c $community $address $oid{'load_5'}`;
if($output =~ /STRING: \"([0-9\.]*)\"/) {
	$load_5 = $1;
}
else {
	die "Failed to parse SNMP output from $address\n";
}
$output = `$snmp_cmd -c $community $address $oid{'load_10'}`;
if($output =~ /STRING: \"([0-9\.]*)\"/) {
	$load_10 = $1;
}
else {
	die "Failed to parse SNMP output from $address\n";
}
$output = `$snmp_cmd -c $community $address $oid{'load_15'}`;
if($output =~ /STRING: \"([0-9\.]*)\"/) {
	$load_15 = $1;
}
else {
	die "Failed to parse SNMP output from $address\n";
}
if($load_5 > $load_critical or $load_10 > ($load_critical-1) or $load_15 > ($load_critical-2)) {
	$critical .= "- Load levels too high: $load_5, $load_10, $load_15";
}
elsif($load_5 > $load_warning or $load_10 > ($load_warning-0.25) or $load_15 > ($load_warning-0.5)) {
	$warning .= "- Load levels too high: $load_5, $load_10, $load_15";
}
$msg .= "Load levels (5/10/15 min average): $load_5, $load_10, $load_15\n";
$perfdata .= " load_average=$load_5;$load_warning;$load_critical";

# Check memory usage (virtual_mem / virtual_memused)
my $mem = 0;
my $mem_used = 0;
$output = `$snmp_cmd -c $community $address $oid{'virtual_mem'}`;
if($output =~ /INTEGER: (\d*)/) {
	$mem = $1;
}
else {
	die "Error in SNMP output!\n";
}
$output = `$snmp_cmd -c $community $address $oid{'virtual_memused'}`;
if($output =~ /INTEGER: (\d*)/) {
	$mem_used = $1;
	print "Mem used: $1\n" if $debug;
}
else {
	die "Error in SNMP output!\n";
}
my $mem_usage = int(($mem_used/$mem)*100);
if($debug) {
	print "Mem: $mem\n";
	print "Mem usage: $mem_usage\n";
}
if($mem_usage > $mem_critical) {
	$critical .= " - Memory usage: $mem_usage%";
}
elsif($mem_usage > $mem_warning) {
	$warning .= " - Memory usage: $mem_usage%";
}
$msg .= "Memory usage: $mem_usage%";
$perfdata .= " mem_usage=$mem_usage%;$mem_warning;$mem_critical;0;100";

# Return output to nagios/icinga
if($critical ne "") {
	print "CRITICAL: $critical\n";
	print $msg;
	print "| $perfdata\n";
	exit 2;
}
elsif($warning ne "") {
	print "WARNING: $warning\n";
	print $msg;
	print "| $perfdata\n";
	exit 1;
}
else {
	print "OK: All thresholds within limits\n";
	print $msg;
	print "| $perfdata\n";
	exit 0;
}
